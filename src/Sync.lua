---
--- A program meant to fetch and if needed update my various programs automatically, so I don't have to pastebin get everything all the fucking time
---

--- Create the strings for all the filenames
consumeLocation = '/consume.lua'
tunnelLocation = '/tunnel.lua'
stripMineLocation = '/stripmine.lua'
tunnelTorchLocation = '/tunneltorch.lua'
stripTorchLocation = '/striptorch.lua'

--- Create strings for all the url locations
consumeURL = "https://raw.githubusercontent.com/PerpetuaLux/TurtlePrograms/main/src/Consume.lua"
tunnelURL = "https://raw.githubusercontent.com/PerpetuaLux/TurtlePrograms/main/src/Tunnel.lua"
stripMineURL = "https://raw.githubusercontent.com/PerpetuaLux/TurtlePrograms/main/src/StripMine.lua"
tunnelTorchURL = "https://raw.githubusercontent.com/PerpetuaLux/TurtlePrograms/main/src/TunnelTorch.lua"
stripTorchURL = "https://raw.githubusercontent.com/PerpetuaLux/TurtlePrograms/main/src/StripTorch.lua"

--- Create strings for all the plaintext names
consumeName = 'Consume'
tunnelName = 'Tunnel'
stripMineName = 'StripMine'
tunnelTorchName = 'TunnelTorch'
stripTorchName = 'StripTorch'

--- A function to update the code
function updateCode(code, location, name)
    --- Check if the file already exists, and if it doesn't make it and place the appropriate code inside

    if not (fs.exists(location)) then
        local newFile = fs,open(location, 'w')
        print(name .. " has been created")
        newFile.close()
        --- If it does, put it into a variable as old code to be compared later
    else
        local currentFile = fs.open(location, 'r')
        local oldCode = currentFile.readAll()
        currentFile.close()

        local newFile = fs.open(location, 'w')

        --- Then compare the new code with the old code to see if there are changes
        --- If there are, update it and print some info about the changes (bytes changed) if not then print that there are no changes
---
        if oldCode == code then
            newFile.write(oldCode)
            print("No changes made to " .. name .. " - Code unchanged")
        else
            newFile.write(code)
            print("Writing code to " .. name)
            bytesChanged = string.len(code) - string.len(oldCode)

            if bytesChanged >= 0 then
                print(tostring(math.abs(bytesChanged)) .. " bytes added to " .. name)
            else
                print(tostring(math.abs(bytesChanged)) .. " bytes removed from " .. name)
            end
        end
    end
end

--- A function to get the file from the internet
function getFile(url)
    --- Download the files, using Cache-Control = no-store to make sure it's always a fresh file
    --- Check if file downloaded or Errored out, if Errored then print the error
    local response, consumeError = http.get(url,  { ["Cache-Control"] = "no-store"} )
    if response == nil then
        error(consumeError)
    end
    return response
end


--- Put the files into variables that can be used later
consumeCode = getFile(consumeURL)
tunnelCode = getFile(tunnelURL)
stripMineCode = getFile(stripMineURL)
tunnelTorchCode = getFile(tunnelTorchURL)
stripTorchCode = getFile(stripTorchURL)

if consumeCode ~= nil then
    updateCode(consumeCode, consumeLocation, consumeName)
end
if tunnelCode ~= nil then
    updateCode(tunnelCode, tunnelLocation, tunnelName)
end
if stripMineCode ~= nil then
    updateCode(stripMineCode, stripMineLocation, stripMineName)
end
if tunnelTorchCode ~= nil then
    updateCode(tunnelTorchCode, tunnelTorchLocation, tunnelTorchName)
end
if stripTorchCode ~= nil then
    updateCode(stripTorchCode, stripTorchLocation, stripTorchName)
end



---
---Cache-Control: no-store
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jonathan.
--- DateTime: 07/06/2021 09:43
---